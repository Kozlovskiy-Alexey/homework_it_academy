package homework.homework3;

/*
1. Побитовые операции:
	1.1. http://developer.alexanderklimov.ru/android/java/bitwise.php
	1.2 Использовать ВСЕ возможные побитовые операции с числами 42 и 15.
	1.3 Использовать ВСЕ возможные побитовые операции с числами -42 и -15.
	1.4 В комментариях к каждой операции написать двоичный код каждого числа и результата операции.
	1.5 Попробуйте сделать побитовую операцию с числова 42.5

~	Побитовый унарный оператор NOT
&	Побитовый AND
&=	Побитовый AND с присваиванием
|	Побитовый OR
|=	Побитовый OR с присваиванием
^	Побитовый исключающее OR
^=	Побитовый исключающее OR с присваиванием
>>	Сдвиг вправо
>>=	Сдвиг вправо с присваиванием
>>>	Сдвиг вправо с заполнением нулями
<<	Сдвиг влево
<<=	Сдвиг влево с присваиванием
>>>=	Сдвиг вправо с заполнением нулями с присваиванием
*/
public class TaskTxt1 {

    public static void main(String[] args) {
        byte a = 42; // 0010 1010
        byte b = 15; // 0000 1111
        byte c;

        String line = "------------";

        //1.2
        // ~	Побитовый унарный оператор NOT
        System.out.println("~");
        System.out.println(~a + " " + ~b + "\n" + line);              // a = 1101 0101  b = 1111 0000 - дополнительный код необходимо переводить в прямой, бит отрицательный, поэтому сначала дополнительный код нужно перевести в прямой и добавить к ответу знак минус.

        // &	Побитовый AND
        System.out.println("&");
        System.out.println((a & b) + "\n" + line);                   // 0000 1010

        // &=	Побитовый AND с присваиванием
        System.out.println("&=");
        a &= 15;
        b &= 1;
        System.out.println(a + " " + b + "\n" + line);                // a = 0000 1010 b = 0000 0001

        // |	Побитовый OR
        a = 42;                 // 0010 1010
        b = 15;                 // 0000 1111
        // 0010 1111
        System.out.println("|");
        System.out.println((a | b) + "\n" + line);

        // |=	Побитовый OR с присваиванием
        a = 42;                 // 0010 1010
        a |= 15;                // 0000 1111
        // 0010 1111
        b = 15;                 // 0000 1111
        b |= 16;                // 0001 0000
        // 0001 1111
        System.out.println("|=");
        System.out.println(a + " " + b + "\n" + line);

        // ^	Побитовый исключающее OR
        a = 42;                 // 0010 1010
        b = 15;                 // 0000 1111
        c = (byte) (a ^ b);     // 0010 0101
        System.out.println("^");
        System.out.println(c);

        // ^=	Побитовый исключающее OR с присваиванием
        a = 42;                 // 0010 1010
        a ^= 15;                // 0000 1111
        // 0010 0101
        b = 15;                 // 0000 1111
        b ^= 1;                 // 0000 0001
        // 0000 1110
        System.out.println("^=");
        System.out.println(a + " " + b + "\n" + line);

        // >>	Сдвиг вправо
        a = 42;                 // 0010 1010
        a = (byte) (a >> 1);    // 0001 0101
        b = 15;                 // 0000 1111
        b = (byte) (b >> 2);    // 0000 0011
        System.out.println(">>");
        System.out.println(a + " " + b + "\n" + line);

        // >>=	Сдвиг вправо с присваиванием
        a = 42;                 // 0010 1010
        a >>= 1;                // 0001 0101
        b = 15;                 // 0000 1111
        b >>= 2;                // 0000 0011
        System.out.println(">>=");
        System.out.println(a + " " + b + "\n" + line);

        // >>>	Сдвиг вправо с заполнением нулями
        a = 42;                 // 0010 1010
        a = (byte) (a >>> 4);   // 0000 0010
        b = -15;                // 1111 0001
        b = (byte) (b >>> 4);   // 1111 1111 т.к. перед сдвигом произошло продвижение byte к типу int 1111 1111 11111 11111 11111 1111 1111 0001, затем в byte 1111 1111
        System.out.println(">>>");
        System.out.println(a + " " + b + "\n" + line);

        // <<	Сдвиг влево
        a = 42;                 // 0010 1010
        a = (byte) (a << 3);    // 0101 0000
        b = 15;                 // 0000 1111
        b = (byte) (b << 2);    // 0011 1100
        System.out.println("<<");
        System.out.println(a + " " + b + "\n" + line);

        // <<=	Сдвиг влево с присваиванием
        a = 42;                 // 0010 1010
        a <<= 1;                // 0101 0100
        b = 15;                 // 0000 1111
        b <<= 4;                // 1111 0000
        System.out.println(">>=");
        System.out.println(a + " " + b + "\n" + line);

        //>>>=	Сдвиг вправо с заполнением нулями с присваиванием
        a = 42;                 // 0010 1010
        a >>>= 4;               // 0000 0010
        b = -15;                // 1111 0001
        b >>>= 4;               // 1111 1111 т.к. перед сдвигом произошло продвижение byte к типу int 1111 1111 11111 11111 11111 1111 1111 0001, затем в byte 1111 1111
        System.out.println(">>>");
        System.out.println(a + " " + b + "\n" + line);

        //1.3
        // ~	Побитовый унарный оператор NOT
        int d = -42;                                        // 1111 1111 1111 1111 1111 1111 1101 0110
        //~0000 0000 0000 0000 0000 0000 0010 1001
        int f = -15;                                        // 1111 1111 1111 1111 1111 1111 1111 0001
        //~0000 0000 0000 0000 0000 0000 0000 1110
        System.out.println("~");
        System.out.println(~d + " " + ~f + "\n" + line);

        // &	Побитовый AND
        d = -42;                                             // 1111 1111 1111 1111 1111 1111 1101 0110
        f = -15;                                             // 1111 1111 1111 1111 1111 1111 1111 0001
        int e = d & f;                                       // 1111 1111 1111 1111 1111 1111 1101 0000

        System.out.println("&");
        System.out.println(e + "\n" + line);

        // &=	Побитовый AND с присваиванием
        d = -42;                                             // 1111 1111 1111 1111 1111 1111 1101 0110
        d &= -1;                                             // 1111 1111 1111 1111 1111 1111 1111 1111
                                                             // 1111 1111 1111 1111 1111 1111 1101 0110
        f = -15;                                             // 1111 1111 1111 1111 1111 1111 1111 0001
        f &= -1;                                             // 1111 1111 1111 1111 1111 1111 1111 1111
                                                             // 1111 1111 1111 1111 1111 1111 1111 0001
        System.out.println("&=");
        System.out.println(d + " " + f + "\n" + line);

        // |	Побитовый OR
        d = -42;                                             // 1111 1111 1111 1111 1111 1111 1101 0110
        f = -15;                                             // 1111 1111 1111 1111 1111 1111 1111 0001
        e = d | f;                                           // 1111 1111 1111 1111 1111 1111 1101 0000
        System.out.println("&");
        System.out.println(e + "\n" + line);

        // ^	Побитовый исключающее OR
        d = -42;                                             // 1111 1111 1111 1111 1111 1111 1101 0110
        f = -15;                                             // 1111 1111 1111 1111 1111 1111 1111 0001
        e = d ^ f;                                           // 0000 0000 0000 0000 0000 0000 0010 0111
        System.out.println("&");
        System.out.println(e + "\n" + line);

        // ^=	Побитовый исключающее OR с присваиванием
        d = -42;                                             // 1111 1111 1111 1111 1111 1111 1101 0110
        d ^= -2;                                             // 1111 1111 1111 1111 1111 1111 1111 1110
                                                             // 0000 0000 0000 0000 0000 0000 0010 1000
        f = -15;                                             // 1111 1111 1111 1111 1111 1111 1111 0001
        f ^= -3;                                             // 1111 1111 1111 1111 1111 1111 1111 1101
                                                             // 0000 0000 0000 0000 0000 0000 0000 1100
        System.out.println("&=");
        System.out.println(d + " " + f + "\n" + line);

        // >>	Сдвиг вправо
        d = -42;                                             // 1111 1111 1111 1111 1111 1111 1101 0110
        d = d >> 1;                                          // 1111 1111 1111 1111 1111 1111 1110 1011
        f = -15;                                             // 1111 1111 1111 1111 1111 1111 1111 0001
        f = f >> 1;                                          // 1111 1111 1111 1111 1111 1111 1111 1000
        System.out.println(">>");
        System.out.println(d + " " + f + "\n" + line);

        // >>=	Сдвиг вправо с присваиванием
        d = -42;                                             // 1111 1111 1111 1111 1111 1111 1101 0110
        d >>= 2;                                             // 1111 1111 1111 1111 1111 1111 1111 0101
        f = -15;                                             // 1111 1111 1111 1111 1111 1111 1111 0001
        f >>= 2;                                             // 1111 1111 1111 1111 1111 1111 1111 1100
        System.out.println(">>=");
        System.out.println(d + " " + f + "\n" + line);

        // >>>	Сдвиг вправо с заполнением нулями
        d = -42;                                             // 1111 1111 1111 1111 1111 1111 1101 0110
        d = d >>> 25;                                        // 0000 0000 0000 0000 0000 0000 0111 1111
        f = -15;                                             // 1111 1111 1111 1111 1111 1111 1111 0001
        f = f >>> 1;                                         // 0111 1111 1111 1111 1111 1111 1111 1110
        System.out.println(">>>");
        System.out.println(d + " " + f + "\n" + line);

        // <<	Сдвиг влево
        d = -42;                                             // 1111 1111 1111 1111 1111 1111 1101 0110
        d = d << 1;                                          // 1111 1111 1111 1111 1111 1111 1010 1100
        f = -15;                                             // 1111 1111 1111 1111 1111 1111 1111 0001
        f = f << 2;                                          // 1111 1111 1111 1111 1111 1111 1100 0100
        System.out.println("<<");
        System.out.println(d + " " + f + "\n" + line);

        // <<=	Сдвиг влево с присваиванием
        d = -42;                                             // 1111 1111 1111 1111 1111 1111 1101 0110
        d <<= 1;                                             // 1111 1111 1111 1111 1111 1111 1010 1100
        f = -15;                                             // 1111 1111 1111 1111 1111 1111 1111 0001
        f <<= 1;                                             // 0111 1111 1111 1111 1111 1111 1110 0010
        System.out.println("<<=");
        System.out.println(d + " " + f + "\n" + line);

        //>>>=	Сдвиг вправо с заполнением нулями с присваиванием
        d = -42;                                             // 1111 1111 1111 1111 1111 1111 1101 0110
        d >>>= 25;                                           // 0000 0000 0000 0000 0000 0000 0111 1111
        f = -15;                                             // 1111 1111 1111 1111 1111 1111 1111 0001
        f >>>= 24;                                           // 0000 0000 0000 0000 0000 0000 1111 1111
        System.out.println(">>>=");
        System.out.println(d + " " + f + "\n" + line);

        // 1.5

        // double db = 42.5;
        // db >>= 1;
        // побитовые операторы над double не производятся
    }
}
