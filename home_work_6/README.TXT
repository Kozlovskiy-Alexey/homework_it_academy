2.1 Найти в тексте все использованные слова и поместить их в коллекцию Set - package homework.home_work_6 - class WarAndPieceMain1.

2.2 Найти в тексте топ N (настраиваемое значение) слов и вывести количество этих слов используя Map и List.
    Отсортировать по количеству. Распечатать в консоль - package homework.home_work_6 - class WarAndPieceMain2.

3. Написать интерфейс ISearchEngine. Это будет интерфейс в котором будут методы:
	3.1 long search(String text, String word) - Метод возвращает информации о количестве раз которое встречается слово в тексте. Первый параметр текст
	в котором ищем, второй параметр что ищем в тексте.
4. Реализовать интерфейс ISearchEngine:
	4.1 Написать класс EasySearch. Реализовать поиск используя метод indexOf из класса String. В данной реализации запрещено использовать регулярные выражения
	в любом виде, для любых задач. Данный класс ищет слова с учётом регистра.
	4.2* Написать класс RegExSearch реализующий интерфейс ISearchEngine. Реализовать поиск при помощи класса Matcher. Данный класс ищет слова с учётом регистра.
	4.3* Написать декоратор SearchEnginePunctuationNormalizer для ISearchEngine который будет удалять нежелательные символы. Любые знаки препинания, лишние пробелы
	и например переводы строк.
	4.4* Написать декоратор для ISearchEngine который будет позволять искать данные без учёта регистра.
		Более подробное описание задачи, для понимания чего я хочу:  Тут можно пойти на хитрость, данный класс может просто приводить весь текст и передаваемое
		слово к нижнему регистру но тут возникает вопрос как данный класс может помочь для RegExSearch. Класс RegExSearch в своей реализации использует регулярные
		выражения и в случае с регулярными выражениями есть возможность указать свойство CASE_INSENSITIVE для выражение и оно и так станет не чувствительно к регистру.
		Для того чтобы тут что-то оптимизировать можно воспользоваться оператором instanceof и вычислить таки какого класса нам передали объект ISearchEngine.
		Данная практика является нежелательной но при этом в некоторых случаях очень эффективной.
	4.5** Написать декоратор SearchEngineCaseNormalizer для ISearchEngine который будет приводит все слова к единому падежу. Что позволит учитывать их как одинаковые
	слова. Например после работы данного класса текст "бабушка бабушке бабушку" уже будет выдавать: "бабушка - 3". Падеж можно настроить при помощи конструктора.
5. Используя реализации интерфейса ISearchEngine вывести информацию как часто встречаются слова "война", "и" (как союз), "мир" вне зависимости от регистра.
